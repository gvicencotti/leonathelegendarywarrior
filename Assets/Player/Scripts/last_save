using UnityEngine;

public class PlayerController : MonoBehaviour
{
    [Header("Movement Settings")]
    [SerializeField] private float moveSpeed;       // Character's movement speed
    [SerializeField] private float jumpForce;       // Jump force applied to the character
    [SerializeField] private float dashSpeed;       // Speed during a dash
    [SerializeField] private float dashDuration = 0.5f; // Duration of the dash

    [Header("Ground Layer")]
    [SerializeField] private LayerMask groundLayer; // Layer used to determine if the character is grounded

    // Components and states
    private Rigidbody2D rb;                 // Rigidbody2D component for physics
    private Animator animator;              // Animator component for animations
    private bool isJumping;                 // Tracks if the character is currently jumping
    private bool isDashAttacking;           // Tracks if the character is currently performing a dash attack
    private float dashTime;                 // Tracks the elapsed time for the dash

    private void Awake()
    {
        // Initialize components
        rb = GetComponent<Rigidbody2D>();
        animator = GetComponentInChildren<Animator>();
    }

    private void Update()
    {
        // Handle user input and update animation state each frame
        HandleInput();
        UpdateAnimationState();
    }

    private void FixedUpdate()
    {
        // Handle dash movement in the physics update
        if (isDashAttacking)
        {
            DashMove();
        }
    }

    private void HandleInput()
    {
        // Get horizontal input (e.g., arrow keys or A/D keys)
        float horizontalInput = Input.GetAxisRaw("Horizontal");

        // Handle movement
        Move(horizontalInput);

        // Handle jump input
        if (Input.GetKeyDown(KeyCode.Space) && IsGrounded())
        {
            Jump();
        }

        // Handle attack input
        if (Input.GetMouseButtonDown(0) && !isDashAttacking)
        {
            HandleAttack();
        }

        // Handle dash attack input
        if (Input.GetMouseButtonDown(1) && !isDashAttacking && !isJumping)
        {
            HandleDashAttack(horizontalInput);
        }
    }

    private void Move(float horizontalInput)
    {
        // Prevent movement during normal attack (but allow it during dash)
        if (animator.GetCurrentAnimatorStateInfo(0).IsName("Attack") && !isDashAttacking)
        {
            return;
        }

        // Apply horizontal movement
        rb.linearVelocityX = horizontalInput * moveSpeed;
        rb.linearVelocityY = rb.linearVelocityY; // Maintain vertical velocity

        // Flip the character based on the direction of movement
        if (horizontalInput != 0)
        {
            transform.localScale = new Vector3(Mathf.Sign(horizontalInput), 1, 1);
        }
    }

    private void DashMove()
    {
        // Maintain constant speed during the dash
        rb.linearVelocityX = Mathf.Sign(transform.localScale.x) * dashSpeed;
        rb.linearVelocityY = rb.linearVelocityY; // Maintain vertical velocity
        dashTime += Time.deltaTime;

        // End the dash if the duration is exceeded
        if (dashTime >= dashDuration)
        {
            ResetDashAttack();
        }
    }

    private void Jump()
    {
        // Apply jump force
        rb.linearVelocity = new Vector2(rb.linearVelocity.x, jumpForce);
        isJumping = true;

        // Trigger jump animation
        animator.SetBool("isJumping", true);
    }

    private void HandleAttack()
    {
        // Trigger attack animation
        animator.SetTrigger("isAttacking");

        // Temporarily halt horizontal movement during attack
        rb.linearVelocity = new Vector2(0, rb.linearVelocity.y);

        Debug.Log("Attack Triggered");
    }

    private void HandleDashAttack(float horizontalInput)
    {
        // Start the dash attack
        isDashAttacking = true;
        animator.SetTrigger("isDashAttacking");

        // Maintain the current movement direction
        rb.linearVelocityX = horizontalInput * moveSpeed;
        rb.linearVelocityY = rb.linearVelocityY;

        // Reset dash timer
        dashTime = 0;

        Debug.Log("Dash Attack Triggered");
    }

    private void ResetDashAttack()
    {
        // End the dash attack
        isDashAttacking = false;

        // Reset dash animation trigger
        animator.ResetTrigger("isDashAttacking");

        Debug.Log("Dash Attack Reset");
    }

    private void UpdateAnimationState()
    {
        // Check if the character is on the ground
        bool isGrounded = IsGrounded();

        // Check if the character is running
        bool isRunning = Mathf.Abs(rb.linearVelocity.x) > 0.1f && !isJumping && !isDashAttacking;

        // Update animator parameters
        animator.SetBool("isRunning", isRunning);

        // Reset jump animation if grounded
        if (isGrounded && Mathf.Abs(rb.linearVelocity.y) < 0.1f)
        {
            isJumping = false;
            animator.SetBool("isJumping", false);
        }
    }

    private bool IsGrounded()
    {
        // Check if the character is colliding with the ground layer
        return rb.IsTouchingLayers(groundLayer);
    }
}
